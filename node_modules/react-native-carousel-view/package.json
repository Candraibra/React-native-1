{
  "_args": [
    [
      {
        "raw": "react-native-carousel-view",
        "scope": null,
        "escapedName": "react-native-carousel-view",
        "name": "react-native-carousel-view",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/candra/hi"
    ]
  ],
  "_from": "react-native-carousel-view@latest",
  "_id": "react-native-carousel-view@0.5.1",
  "_inCache": true,
  "_location": "/react-native-carousel-view",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-carousel-view-0.5.1.tgz_1501747548705_0.14716561697423458"
  },
  "_npmUser": {
    "name": "chilijung",
    "email": "chilijung@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-carousel-view",
    "scope": null,
    "escapedName": "react-native-carousel-view",
    "name": "react-native-carousel-view",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-carousel-view/-/react-native-carousel-view-0.5.1.tgz",
  "_shasum": "2b0d64d32d71be09ff7555aa8c19b1dac98c5969",
  "_shrinkwrap": null,
  "_spec": "react-native-carousel-view",
  "_where": "/home/candra/hi",
  "author": {
    "name": "chilijung",
    "email": "chilijung@gmail.com",
    "url": "http://lijung.com/"
  },
  "dependencies": {
    "react-mixin": "^3.0.5",
    "react-timer-mixin": "^0.13.3"
  },
  "description": "react-native carousel",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-eslint": "^7.2.3",
    "babel-preset-react-native": "^2.1.0",
    "eslint": "^4.2.0",
    "eslint-config-google": "^0.9.1",
    "eslint-plugin-react": "^7.1.0",
    "flow-bin": "^0.49.1"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "2b0d64d32d71be09ff7555aa8c19b1dac98c5969",
    "tarball": "https://registry.npmjs.org/react-native-carousel-view/-/react-native-carousel-view-0.5.1.tgz"
  },
  "gitHead": "08e423024a6db204e079d00bfe18b6083db08d22",
  "license": "MIT",
  "main": "./src/carousel.js",
  "maintainers": [
    {
      "name": "chilijung",
      "email": "chilijung@gmail.com"
    }
  ],
  "name": "react-native-carousel-view",
  "optionalDependencies": {},
  "readme": "# react-native-carousel-view\n\nreact-native carousel, work on both `iOS` and `android`, test on RN >= 0.45 (if this work on earlier version, please open an issue. And will add here)\n\n## Install\n\n```js\nnpm install react-native-carousel-view\n```\n\n**NOTE**: styling in iOS and Android is slightly [different](#difference)\n\n## Demo\n<table>\n  <tr>\n    <th>\n      Android\n    </th>\n    <th>\n      iOS\n    </th>\n  </tr>\n  <tr>\n    <td>\n      <img src=\"./example/android.gif\" width=\"300\" style=\"float: left;\">\n    </td>\n    <td>\n      <img src=\"./example/ios.gif\" width=\"300\" style=\"float: left;\">\n    </td>\n  <tr>\n</table>\n\n## Props\n\n```js\ntype Props = {\n  hideIndicators: boolean, // Set to true to hide the indicators\n  indicatorColor: string, // Active indicator color\n  indicatorSize: number, // Indicator bullet size\n  inactiveIndicatorColor: string, // Inactive indicator color\n  indicatorAtBottom: boolean, // Set to false to show the indicators at the top\n  indicatorOffset: number, // Indicator relative position from top or bottom\n  indicatorText: string, // Active indicator content ( You can customize to use any Unicode character )\n  inactiveIndicatorText: string, // Inactive indicator content ( You can customize to use any Unicode character )\n  width: ?number, // the width of the carousel\n  height: number, // the height of the carousel\n  initialPage: number, // initial start page\n  indicatorSpace: number, // space between each indicator\n  animate: boolean, // Enable carousel autoplay\n  delay: number, // Set Animation delay between slides\n  loop: boolean, // Allow infinite looped animation. Depends on Prop {...animate} set to true.\n  contentContainerStyle?: {[attr: string]: any}, // content container style, in `Android` this will pass to ViewPagerAndroid style props, in `iOS` this will pass to ScrollView contentContainerStyle props.\n  children: any,\n  onPageChange?: (number) => void, // Called when the active page changes\n  onScrollBegin?: () => void, // Called when scroll begin\n  onScroll?: () => void, // Called while scrolling\n}\n```\n\ndefault props:\n\n```js\nstatic defaultProps = {\n  hideIndicators: false,\n  indicatorColor: '#000000',\n  indicatorSize: 20,\n  inactiveIndicatorColor: '#999999',\n  indicatorAtBottom: true,\n  indicatorOffset: 0,\n  indicatorText: '•',\n  inactiveIndicatorText: '•',\n  width: null,\n  height: 200,\n  initialPage: 0,\n  indicatorSpace: 10,\n  animate: true,\n  delay: 1000,\n  loop: true,\n}\n```\n\n## Examples\n\nSimple example (iOS and android is slightly different), see in [Difference](#Difference) section.\n\n```js\n\nimport React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  AppRegistry,\n} from 'react-native';\nimport Carousel from 'react-native-carousel-view';\n\nexport default class example extends Component {\n  render() {\n    return (\n      <View style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n        <View style={styles.container}>\n          <Carousel\n            width={375}\n            height={300}\n            delay={2000}\n            indicatorAtBottom={false}\n            indicatorSize={20}\n            indicatorText=\"✽\"\n            indicatorColor=\"red\"\n            >\n            <View style={styles.contentContainer}>\n              <Text>Page 1</Text>\n            </View>\n            <View style={styles.contentContainer}>\n              <Text>Page 2</Text>\n            </View>\n            <View style={styles.contentContainer}>\n              <Text>Page 3</Text>\n            </View>\n          </Carousel>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 0.5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  contentContainer: {\n    borderWidth: 2,\n    borderColor: '#CCC',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\n\nAppRegistry.registerComponent('example', () => example);\n```\n\n- Android: [Example](./example/index.android.js)\n\n- iOS: [Example](./example/index.ios.js)\n\n## Difference\n\nIn `Android` the carousel effect use `ViewPagerAndroid`, on the other hand, in `iOS` use `ScrollView`.  Due to the mechanism difference between iOS and Android so the styles settings is slightly different.\n\nThe `contentContainerStyle` props should be set in different settings if you want to have the same appearance in iOS and Android.\n\nIn iOS `contentContainerStyle` means the container of the child.\nThis is an example.\n\n```js\n<Carousel\n  width={375}\n  height={300} // =====> the container will be height 300\n  >\n  <View style={{height: 200, width: 300}}> // ===> child height 200, width 300. if the children's height and width is not set width and height from Carousel component will set to children.\n    <Text>Page 1</Text>\n  </View>\n  <View style={{height: 200, width: 300}}> // ===> child height 200, width 300\n    <Text>Page 2</Text>\n  </View>\n  <View style={{height: 200, width: 300}}> // ===> child height 200, width 300\n    <Text>Page 3</Text>\n  </View>\n</Carousel>\n```\n\nbut in Android it means it is the children's \nview style. According to the react-native docs https://facebook.github.io/react-native/docs/viewpagerandroid.html\n\n> Container that allows to flip left and right between child views. Each child view of the ViewPagerAndroid will be treated as a separate page and will be stretched to fill the ViewPagerAndroid.\n>It is important all children are <View>s and not composite components. You can set style properties like padding or backgroundColor for each child.\n\n```js\n<Carousel\n  width={375}\n  height={300} // =====> the container will be height 300\n  >\n  <View style={{height: 200}}> // ===> child height will still be 300, and width will automatically be 375 and can't be changed\n    <Text>Page 1</Text>\n  </View>\n  <View style={{height: 200}}> // ===> child height will still be 300, and width will automatically be 375 and can't be changed\n    <Text>Page 2</Text>\n  </View>\n  <View style={{height: 200}}> // ===> child height will still be 300, and width will automatically be 375 and can't be changed\n    <Text>Page 3</Text>\n  </View>\n</Carousel>\n```\n\n## Develop\n\ngo to `example` folder and enter `yarn install` and `yarn run haul`\n\nselect your platform:\n\n```\n➜  example git:(master) yarn run haul\nyarn run v0.27.5\n$ haul start\n? Select platform to bundle for (Use arrow keys)\n❯ ios - Serves iOS bundle\n  android - Serves Android bundle\n  all - Serves both platforms\n```\n\nand run `react-native run-ios` or `react-native run-android` to open simulators.\n\n## See also\n\n- https://github.com/Canner/react-native-image-page - a react-native image carousel, with zoom-pan gestures and full-screen support, work on both iOS and Android\n\n## NOTE\n\nthis repo is original from https://github.com/nick/react-native-carousel with lots of improvements.\n\n## License\n\nApache 2.0\n",
  "readmeFilename": "README.md",
  "scripts": {
    "prepublish": "eslint src && ./node_modules/.bin/flow",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.5.1"
}
